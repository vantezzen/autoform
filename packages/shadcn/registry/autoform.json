{
  "name": "AutoForm",
  "type": "registry:ui",
  "registryDependencies": [
    "alert",
    "button",
    "calendar",
    "card",
    "checkbox",
    "form",
    "input",
    "label",
    "select",
    "skeleton",
    "switch",
    "textarea",
    "toggle"
  ],
  "dependencies": ["zod", "@autoform/react"],
  "devDependencies": [],
  "tailwind": {
    "config": {}
  },
  "cssVars": {},
  "files": [
    {
      "path": "src\\components\\ui\\autoform\\utils.ts",
      "target": "src\\components\\ui\\autoform\\utils.ts",
      "content": "import { buildZodFieldConfig } from \"@autoform/react\";\r\nimport { FieldTypes } from \"./AutoForm\";\r\n\r\nexport const fieldConfig = buildZodFieldConfig<\r\n  FieldTypes,\r\n  {\r\n    // Add types for `customData` here.\r\n  }\r\n>();\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\types.ts",
      "target": "src\\components\\ui\\autoform\\types.ts",
      "content": "import { ExtendableAutoFormProps } from \"@autoform/react\";\r\nimport { FieldValues } from \"react-hook-form\";\r\n\r\nexport interface AutoFormProps<T extends FieldValues>\r\n  extends ExtendableAutoFormProps<T> {}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\index.ts",
      "target": "src\\components\\ui\\autoform\\index.ts",
      "content": "export * from \"./AutoForm\";\r\nexport * from \"./types\";\r\nexport * from \"./utils\";\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\AutoForm.tsx",
      "target": "src\\components\\ui\\autoform\\AutoForm.tsx",
      "content": "import React from \"react\";\r\nimport {\r\n  AutoForm as BaseAutoForm,\r\n  AutoFormUIComponents,\r\n} from \"@autoform/react\";\r\nimport { AutoFormProps } from \"./types\";\r\nimport { Form } from \"./components/Form\";\r\nimport { FieldWrapper } from \"./components/FieldWrapper\";\r\nimport { ErrorMessage } from \"./components/ErrorMessage\";\r\nimport { SubmitButton } from \"./components/SubmitButton\";\r\nimport { StringField } from \"./components/StringField\";\r\nimport { NumberField } from \"./components/NumberField\";\r\nimport { BooleanField } from \"./components/BooleanField\";\r\nimport { DateField } from \"./components/DateField\";\r\nimport { SelectField } from \"./components/SelectField\";\r\nimport { ObjectWrapper } from \"./components/ObjectWrapper\";\r\nimport { ArrayWrapper } from \"./components/ArrayWrapper\";\r\nimport { ArrayElementWrapper } from \"./components/ArrayElementWrapper\";\r\n\r\nconst ShadcnUIComponents: AutoFormUIComponents = {\r\n  Form,\r\n  FieldWrapper,\r\n  ErrorMessage,\r\n  SubmitButton,\r\n  ObjectWrapper,\r\n  ArrayWrapper,\r\n  ArrayElementWrapper,\r\n};\r\n\r\nexport const ShadcnAutoFormFieldComponents = {\r\n  string: StringField,\r\n  number: NumberField,\r\n  boolean: BooleanField,\r\n  date: DateField,\r\n  select: SelectField,\r\n} as const;\r\nexport type FieldTypes = keyof typeof ShadcnAutoFormFieldComponents;\r\n\r\nexport function AutoForm<T extends Record<string, any>>({\r\n  uiComponents,\r\n  formComponents,\r\n  ...props\r\n}: AutoFormProps<T>) {\r\n  return (\r\n    <BaseAutoForm\r\n      {...props}\r\n      uiComponents={{ ...ShadcnUIComponents, ...uiComponents }}\r\n      formComponents={{ ...ShadcnAutoFormFieldComponents, ...formComponents }}\r\n    />\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\components\\SubmitButton.tsx",
      "target": "src\\components\\ui\\autoform\\components\\SubmitButton.tsx",
      "content": "import React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\n\r\nexport const SubmitButton: React.FC<{ children: React.ReactNode }> = ({\r\n  children,\r\n}) => <Button type=\"submit\">{children}</Button>;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\components\\StringField.tsx",
      "target": "src\\components\\ui\\autoform\\components\\StringField.tsx",
      "content": "import { Input } from \"@/components/ui/input\";\r\nimport { AutoFormFieldProps } from \"@autoform/react\";\r\nimport React from \"react\";\r\n\r\nexport const StringField: React.FC<AutoFormFieldProps> = ({\r\n  inputProps,\r\n  error,\r\n  id,\r\n}) => {\r\n  const { key, ...props } = inputProps;\r\n\r\n  return (\r\n    <Input id={id} className={error ? \"border-destructive\" : \"\"} {...props} />\r\n  );\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "autoform/components/SelectField.tsx",
      "target": "components/ui/autoform/components/SelectField.tsx",
      "content": "import {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { AutoFormFieldProps } from \"@autoform/react\";\nimport React from \"react\";\n\nexport const SelectField: React.FC<AutoFormFieldProps> = ({\n  field,\n  inputProps,\n  error,\n  id,\n}) => {\n  const { key, ...props } = inputProps;\n\n  return (\n    <Select\n      {...props}\n      onValueChange={(value) => {\n        const syntheticEvent = {\n          target: {\n            value,\n            name: field.key,\n          },\n        } as React.ChangeEvent<HTMLInputElement>;\n        props.onChange(syntheticEvent);\n      }}\n      defaultValue={field.default}\n    >\n      <SelectTrigger id={id} className={error ? \"border-destructive\" : \"\"}>\n        <SelectValue placeholder=\"Select an option\" />\n      </SelectTrigger>\n      <SelectContent>\n        {(field.options || []).map(([key, label]) => (\n          <SelectItem key={key} value={key}>\n            {label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\components\\ObjectWrapper.tsx",
      "target": "src\\components\\ui\\autoform\\components\\ObjectWrapper.tsx",
      "content": "import React from \"react\";\r\nimport { ObjectWrapperProps } from \"@autoform/react\";\r\n\r\nexport const ObjectWrapper: React.FC<ObjectWrapperProps> = ({\r\n  label,\r\n  children,\r\n}) => {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <h3 className=\"text-lg font-medium\">{label}</h3>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\components\\NumberField.tsx",
      "target": "src\\components\\ui\\autoform\\components\\NumberField.tsx",
      "content": "import { Input } from \"@/components/ui/input\";\r\nimport { AutoFormFieldProps } from \"@autoform/react\";\r\nimport React from \"react\";\r\n\r\nexport const NumberField: React.FC<AutoFormFieldProps> = ({\r\n  inputProps,\r\n  error,\r\n  id,\r\n}) => {\r\n  const { key, ...props } = inputProps;\r\n\r\n  return (\r\n    <Input\r\n      id={id}\r\n      type=\"number\"\r\n      className={error ? \"border-destructive\" : \"\"}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\components\\Form.tsx",
      "target": "src\\components\\ui\\autoform\\components\\Form.tsx",
      "content": "import React from \"react\";\r\n\r\nexport const Form = React.forwardRef<\r\n  HTMLFormElement,\r\n  React.ComponentProps<\"form\">\r\n>(({ children, ...props }, ref) => {\r\n  return (\r\n    <form ref={ref} className=\"space-y-4\" {...props}>\r\n      {children}\r\n    </form>\r\n  );\r\n});\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\components\\FieldWrapper.tsx",
      "target": "src\\components\\ui\\autoform\\components\\FieldWrapper.tsx",
      "content": "import React from \"react\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { FieldWrapperProps } from \"@autoform/react\";\r\n\r\nconst DISABLED_LABELS = [\"boolean\", \"object\", \"array\"];\r\n\r\nexport const FieldWrapper: React.FC<FieldWrapperProps> = ({\r\n  label,\r\n  children,\r\n  id,\r\n  field,\r\n  error,\r\n}) => {\r\n  const isDisabled = DISABLED_LABELS.includes(field.type);\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      {!isDisabled && (\r\n        <Label htmlFor={id}>\r\n          {label}\r\n          {field.required && <span className=\"text-destructive\"> *</span>}\r\n        </Label>\r\n      )}\r\n      {children}\r\n      {field.fieldConfig?.description && (\r\n        <p className=\"text-sm text-muted-foreground\">\r\n          {field.fieldConfig.description}\r\n        </p>\r\n      )}\r\n      {error && <p className=\"text-sm text-destructive\">{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\components\\ErrorMessage.tsx",
      "target": "src\\components\\ui\\autoform\\components\\ErrorMessage.tsx",
      "content": "import React from \"react\";\r\nimport { AlertCircle } from \"lucide-react\";\r\n\r\nimport { Alert, AlertTitle } from \"@/components/ui/alert\";\r\n\r\nexport const ErrorMessage: React.FC<{ error: string }> = ({ error }) => (\r\n  <Alert variant=\"destructive\">\r\n    <AlertCircle className=\"h-4 w-4\" />\r\n    <AlertTitle>{error}</AlertTitle>\r\n  </Alert>\r\n);\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\components\\DateField.tsx",
      "target": "src\\components\\ui\\autoform\\components\\DateField.tsx",
      "content": "import { Input } from \"@/components/ui/input\";\r\nimport { AutoFormFieldProps } from \"@autoform/react\";\r\nimport React from \"react\";\r\n\r\nexport const DateField: React.FC<AutoFormFieldProps> = ({\r\n  inputProps,\r\n  error,\r\n  id,\r\n}) => {\r\n  const { key, ...props } = inputProps;\r\n\r\n  return (\r\n    <Input\r\n      id={id}\r\n      type=\"date\"\r\n      className={error ? \"border-destructive\" : \"\"}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "autoform/components/BooleanField.tsx",
      "target": "components/ui/autoform/components/BooleanField.tsx",
      "content": "import React from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { AutoFormFieldProps } from \"@autoform/react\";\nimport { Label } from \"../../label\";\n\nexport const BooleanField: React.FC<AutoFormFieldProps> = ({\n  field,\n  label,\n  id,\n  inputProps,\n}) => (\n  <div className=\"flex items-center space-x-2\">\n    <Checkbox\n      id={id}\n      onCheckedChange={(checked) => {\n        // react-hook-form expects an event object\n        const event = {\n          target: {\n            name: field.key,\n            value: checked,\n          },\n        };\n        inputProps.onChange(event);\n      }}\n      checked={inputProps.value}\n    />\n    <Label htmlFor={id}>\n      {label}\n      {field.required && <span className=\"text-destructive\"> *</span>}\n    </Label>\n  </div>\n);\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\components\\ArrayWrapper.tsx",
      "target": "src\\components\\ui\\autoform\\components\\ArrayWrapper.tsx",
      "content": "import React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { PlusIcon } from \"lucide-react\";\r\nimport { ArrayWrapperProps } from \"@autoform/react\";\r\n\r\nexport const ArrayWrapper: React.FC<ArrayWrapperProps> = ({\r\n  label,\r\n  children,\r\n  onAddItem,\r\n}) => {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <h3 className=\"text-lg font-medium\">{label}</h3>\r\n      {children}\r\n      <Button onClick={onAddItem} variant=\"outline\" size=\"sm\" type=\"button\">\r\n        <PlusIcon className=\"h-4 w-4\" />\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "src\\components\\ui\\autoform\\components\\ArrayElementWrapper.tsx",
      "target": "src\\components\\ui\\autoform\\components\\ArrayElementWrapper.tsx",
      "content": "import React from \"react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { TrashIcon } from \"lucide-react\";\r\nimport { ArrayElementWrapperProps } from \"@autoform/react\";\r\n\r\nexport const ArrayElementWrapper: React.FC<ArrayElementWrapperProps> = ({\r\n  children,\r\n  onRemove,\r\n}) => {\r\n  return (\r\n    <div className=\"relative border p-4 rounded-md mt-2\">\r\n      <Button\r\n        onClick={onRemove}\r\n        variant=\"ghost\"\r\n        size=\"sm\"\r\n        className=\"absolute top-2 right-2\"\r\n        type=\"button\"\r\n      >\r\n        <TrashIcon className=\"h-4 w-4\" />\r\n      </Button>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:ui"
    }
  ]
}
